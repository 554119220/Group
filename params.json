{
  "name": "Group",
  "tagline": "轻量级框架 ,无缝支持swoole http server。支持redis扩展，swoole扩展的使用，实现了定时任务功能，分布式任务队列，命令行控制台，数据库脚本自动化，单元测试, rpc服务，异步多进程服务等等实用的功能！！ 欢迎提交代码！",
  "body": "# # Group\r\n\r\n[![Code Climate](https://codeclimate.com/github/fucongcong/framework/badges/gpa.svg)](https://codeclimate.com/github/fucongcong/framework)\r\n[![Build Status](https://travis-ci.org/fucongcong/Group.svg?branch=master)](https://travis-ci.org/fucongcong/Group)\r\n\r\n####编写此框架的意义:\r\n\r\n首先现在流行的框架有很多。编写这个框架，其实可以说这个框架的特色，与其他框架的区别。\r\n\r\n- 支持普通业务场景的功能开发，4层架构。\r\n- 一键启动rpc服务，不与主业务冲突，轻松完成后期SOA转行，支持TCP HTTP Websocket协议\r\n- 一键启动定时任务，还在用系统自带的cronjob？\r\n- 一键启动队列任务，还在自己集成队列服务？\r\n- async多task处理任务支持，业务逻辑复杂性能差？多进程帮你解决性能问题！\r\n- 目录结构清晰简单\r\n- 轻量级。框架的实际代码目前应该在5千行左右\r\n- 包管理composer支持。\r\n- 架构可扩展性，规范的命名空间化，自己扩展类库随时可行\r\n- Debug工具条支持，找性能问题？找你的sql哪里慢了？找视图层渲染变量？找模板？debug条一览无余\r\n- laravel,symfony2有的控制台，我们也有！数据库脚本自动化！自动生成基础结构！自定义扩展控制台！\r\n\r\n#####[使用swoole http server](https://github.com/fucongcong/ssos/blob/master/php/group%E6%A1%86%E6%9E%B6%E6%B5%8B%E8%AF%95.md)\r\n\r\n#####未来版本开发计划： \r\n- Async服务完善。解决数据层断线重连，业务层内存泄漏等常见问题\r\n- 更轻量级化数据层与服务层\r\n- i18n支持\r\n- 一些常用类库的丰富（中文转拼音，验证码，校验，过滤xss，tag...）\r\n\r\n\r\n轻量级框架，通俗易懂，快速上手。\r\n觉得帮到您了点击右上star!给我一点动力！\r\nPHP交流ＱＱ群：390536187\r\n\r\n####1.[Group框架简介](#user-content-group框架简介)\r\n\r\n- [后端框架介绍](#user-content-框架介绍)\r\n\r\n####2.[快速开始](#user-content-快速开始)\r\n- [服务器配置文件](#user-content-1服务器配置文件)\r\n- [进入框架](#user-content-2进入框架)\r\n- [目录结构](#user-content-3目录结构)\r\n\r\n####3.[路由篇](#user-content-路由篇)\r\n\r\n####4.[控制层](#user-content-控制层)\r\n\r\n####5.[服务层](#user-content-服务层)\r\n\r\n####6.[数据层](#user-content-数据层)\r\n\r\n####7.[视图层](#user-content-视图层)\r\n\r\n####8.[框架基础服务](#user-content-框架基础服务)\r\n- [Async](#user-content-async)\r\n- [Container](#user-content-container)\r\n- [Cache](#user-content-cache)\r\n- [Config](#user-content-config)\r\n- [Console](#user-content-console)\r\n- [CronJob](#user-content-cronjob)\r\n- [Debug](#user-content-debug)\r\n- [Exception](#user-content-exception)\r\n- [EventDispatcher](#user-content-eventdispatcher)\r\n- [FileCache](#user-content-filecache)\r\n- [Filesystem](#user-content-filesystem)\r\n- [Route](#user-content-route)\r\n- [Request](#user-content-request)\r\n- [Response](#user-content-response)\r\n- [Session](#user-content-session)\r\n- [Log](#user-content-log)\r\n- [Queue](#user-content-queue)\r\n- [Test](#user-content-test)\r\n- [RPC](#user-content-rpc)\r\n\r\n####9.[单元测试](#user-content-单元测试)\r\n\r\n## Group框架简介\r\n\r\n####环境依赖\r\n- PHP > 5.5\r\n- Redis\r\n- Mysql\r\n- Nginx or Apache\r\n- Composer\r\n\r\n####扩展模块\r\n- [PhpRedis](https://github.com/phpredis/phpredis)\r\n- [Swoole，建议最新版本，1.8.0以上](https://github.com/swoole/swoole-src)\r\n- [beanstalkd](https://github.com/kr/beanstalkd) \r\n\r\n####框架介绍\r\n（1）模版引擎：twig （symfony2使用的模版引擎）\r\n\r\n（2）分层：Dao（模型层）,Service（服务层），Controller（控制层），View（视图层）\r\n\r\n## 快速开始\r\n#### 准备\r\n进入目录，执行以下命令\r\n\r\n\tgit clone https://github.com/fucongcong/Group.git\r\n\r\n\tcd Group\r\n\r\n\tcomposer install\r\n#### 更新框架版本（部分涉及到配置文件的需要更新git的master最新分支）\r\n\r\n    composer update\r\n\r\n\r\n####1.服务器配置文件\r\n\r\n[Ngnix配置](https://github.com/fucongcong/Group/blob/master/doc/ngnix_server_config.txt)\r\n[Ngnix&Apache配置](https://github.com/fucongcong/Group/blob/master/doc/nginx_proxy&apache.txt)\r\n\r\n####2.进入框架\r\n\r\n访问 http://localhost:8081 进入框架主页\r\n\r\n####3.目录结构\r\n- app (脚本文件)\r\n- asset (前端文件)\r\n- config (配置文件)\r\n- doc (文档)\r\n- runtime (缓存)\r\n- src (你的网站核心代码)\r\n    - Admin (后台分组)\r\n        - Controller （控制层）\r\n        - View (视图层)\r\n        - routing.php （路由配置）\r\n    - Async (异步服务)\r\n    - Dao （模型层）\r\n\t- Services （服务层）\r\n\t- Web (前台分组)\r\n        - Command (控制台命令扩展)\r\n\t \t- Controller （控制层）\r\n\t \t- Cron （异步定时器）\r\n        - Listeners （监听器）\r\n        - Queue （队列任务）\r\n        - View (视图层)\r\n\t \t- routing.php （路由配置）\r\n    - Demo（可以自行添加分组）\r\n- index.php(主入口)\r\n- server.php(swoole http server 入口)\r\n- rpc_server.php(rpc server 启动脚本)\r\n\r\n## 路由篇\r\n（1）自定义路由\r\n\r\n（2）动态参数绑定\r\n\r\n（3）restful API 风格\r\n\r\n示例：\r\n\r\n```php\r\n<?php\r\nreturn array(\r\n\r\n\t    'homepage'=>[\r\n\t    \t'pattern' => '/',\r\n\t    \t'controller' => 'Web:Home:Default:index',\r\n\t    ],\r\n\r\n\t    'group'=>[\r\n\t    \t'pattern' => '/group/{id}',\r\n\t    \t'controller' => 'Web:Group:Group:test',\r\n\t    \t'methods' => 'GET',\r\n\t    ],\r\n\r\n\t    'create_group'=>[\r\n\t        'pattern' => '/group/{id}',\r\n\t        'controller' => 'Web:Group:Group:index',\r\n\t        'methods' => 'POST',\r\n\t    ],\r\n\r\n\t    'user_group'=>[\r\n\t    \t'pattern' => '/user/{id}/group/{groupId}',\r\n\t    \t'controller' => 'Web:Group:Group:test',\r\n\t    \t'methods' => 'GET',\r\n\t    ],\r\n);\r\n```\r\n\r\n\r\n## 控制层\r\n\r\n（1）第一个控制器\r\n\r\n```php\r\n\t<?php\r\n\tnamespace src\\web\\Controller\\Home;\r\n\r\n\tuse Controller;\r\n\r\n\t//请继承Controller\r\n\tclass DefaultController extends Controller\r\n\t{\r\n\t    //一个action 与route对应\r\n\t    public function indexAction()\r\n\t    {\r\n\t        //渲染模版 模版的启始路径可在config的view.php配置\r\n\t        return $this -> render('Web/Views/Default/index.html.twig');\r\n\t    }\r\n\r\n\t}\r\n\r\n\t?>\r\n```\r\n\r\n（2）如何获取路由传过来的参数？详见Request与Route服务\r\n\r\n```php\r\n<?php\r\nnamespace src\\Web\\Controller\\Group;\r\n\r\nuse Controller;\r\nuse Request;\r\n//在后面我们可以跟上路由定义好的参数，$id\r\npublic function testAction(Request $request, $id)\r\n{\r\n    // echo $id; echo \"<br>\";\r\n\r\n    //可以获取整个路由地址\r\n    $uri = $this -> route() -> getUri();\r\n    //获取所有参数\r\n    $parameters = $this -> route() -> getParameters();\r\n    //获取参数名\r\n    $parametersName = $this -> route() -> getParametersName();\r\n    //获取当前action的名称\r\n    $action = $this -> route() -> getAction();\r\n    //获取系统支持的请求方法\r\n    $methods = $this -> route() -> getMethods();\r\n\r\n    $currentMethod = $this -> route() -> getCurrentMethod();\r\n    //获取当前时区\r\n    $timezone = $this -> getContainer() -> getTimezone();\r\n    //获取当前运行环境\r\n    $environment = $this -> getContainer() -> getEnvironment();\r\n    //这里和Service服务层交互\r\n    echo $this->getGroupService()->getGroup(1);\r\n    //传入模板\r\n    return $this -> render('Web/Views/Group/index.html.twig',array(\r\n        'uri' => $uri,\r\n        'parameters' => $parameters,\r\n        'parametersName' => $parametersName,\r\n        'action' => $action,\r\n        'methods' => $methods,\r\n        'currentMethod' => $currentMethod,\r\n        'timezone' => $timezone,\r\n        'environment' => $environment\r\n        ));\r\n}\r\npublic function getGroupService()\r\n{\r\n\t//创建一个Service实例\r\n    return $this -> createService(\"Group:Group\");\r\n}\r\n```\r\n\r\n## 服务层\r\n#####（1）简单介绍一下目录结构\r\n- Group (示例)\r\n    - Impl （服务层实现的接口）\r\n    - Rely （定义服务之间的依赖关系）\r\n- GroupService.php(接口)\r\n\r\n#####服务层主要用于处理数据层与控制层间数据的业务处理。只要继承Service类就可以了。\r\n\r\n    GroupService.php\r\n```php\r\n<?php\r\nnamespace src\\Services\\Group;\r\n\r\ninterface GroupService\r\n{\r\n    public function getGroup($id);\r\n}\r\n```\r\n\r\n    /Rely/GroupBaseService.php\r\n\r\n```php\r\n<?php\r\nnamespace src\\Services\\Group\\Rely;\r\n\r\nuse Service;\r\n//定义在Rely文件下的依赖\r\nabstract class GroupBaseService extends Service\r\n{\r\n    //获取数据层的对象实例\r\n    public function getGroupDao()\r\n    {\r\n        return $this->createDao(\"Group:Group\");\r\n    }\r\n\r\n    //获取其他服务的对象实例\r\n    public function getUserService()\r\n    {\r\n        return $this -> createService(\"User:User\");\r\n    }\r\n}\r\n```\r\n\r\n    /Impl/GroupServiceImpl.php\r\n\r\n```php\r\n<?php\r\nnamespace src\\Services\\Group\\Impl;\r\n\r\nuse src\\Services\\Group\\Rely\\GroupBaseService;\r\nuse src\\Services\\Group\\GroupService;\r\n\r\nclass GroupServiceImpl extends GroupBaseService implements GroupService\r\n{\r\n    //实现定义的服务层接口方法\r\n    public function getGroup($id)\r\n    {\r\n        return $this -> getUserService() -> getUser(1);\r\n        //return $this->getGroupDao()->getGroup($id);\r\n    }\r\n\r\n}\r\n```\r\n\r\n## 数据层\r\n#####支持主从配置(详见配置文件)\r\n\r\n#####如何使用\r\n\r\n```php\r\n<?php\r\n\r\n    namespace src\\Dao\\Group\\Impl;\r\n\r\n    use Dao;\r\n    use src\\Dao\\Group\\GroupDao;\r\n\r\n    class GroupDaoImpl extends Dao implements GroupDao\r\n    {\r\n        //定以数据表\r\n        protected $tables=\"groups\";\r\n\r\n        //具体方法\r\n        public function getGroup($id)\r\n        {\r\n            $sql=\"SELECT * FROM {$this->tables} WHERE id=:id LIMIT 0,1\";\r\n            //动态参数绑定\r\n            $bind = array('id' => $id);\r\n            //读取默认配置\r\n            //$group = $this->getDefault()->fetchOne($sql, $bind);\r\n\r\n            //读取写服务器配置，如果没有指定具体参数，随机写入分配的服务器\r\n            //$group = $this->getWrite('master1')->fetchOne($sql, $bind);\r\n            //$group = $this->getWrite('master2')->fetchOne($sql, $bind);\r\n\r\n            //读取读服务器配置，如果没有指定具体参数，随机读取分配的服务器\r\n            //$group = $this->getRead()->fetchOne($sql, $bind);\r\n            return $group ? $group : null;\r\n        }\r\n\r\n    }\r\n```\r\n\r\n#####支持的语法\r\n\r\n#####fetch(*)\r\n```php\r\n    $pdo = $this->getDefault();\r\n\r\n    $stm  = 'SELECT * FROM test WHERE foo = :foo AND bar = :bar';\r\n    $bind = array('foo' => 'baz', 'bar' => 'dib');\r\n    $result = $pdo->fetchAll($stm, $bind);\r\n\r\n    // fetchAssoc() returns an associative array of all rows where the key is the\r\n    // first column, and the row arrays are keyed on the column names\r\n    $result = $pdo->fetchAssoc($stm, $bind);\r\n\r\n    // fetchGroup() is like fetchAssoc() except that the values aren't wrapped in\r\n    // arrays. Instead, single column values are returned as a single dimensional\r\n    // array and multiple columns are returned as an array of arrays\r\n    // Set style to PDO::FETCH_NAMED when values are an array\r\n    // (i.e. there are more than two columns in the select)\r\n    $result = $pdo->fetchGroup($stm, $bind, $style = PDO::FETCH_COLUMN)\r\n\r\n    // fetchObject() returns the first row as an object of your choosing; the\r\n    // columns are mapped to object properties. an optional 4th parameter array\r\n    // provides constructor arguments when instantiating the object.\r\n    $result = $pdo->fetchObject($stm, $bind, 'ClassName', array('ctor_arg_1'));\r\n\r\n    // fetchObjects() returns an array of objects of your choosing; the\r\n    // columns are mapped to object properties. an optional 4th parameter array\r\n    // provides constructor arguments when instantiating the object.\r\n    $result = $pdo->fetchObjects($stm, $bind, 'ClassName', array('ctor_arg_1'));\r\n\r\n    // fetchOne() returns the first row as an associative array where the keys\r\n    // are the column names\r\n    $result = $pdo->fetchOne($stm, $bind);\r\n\r\n    // fetchPairs() returns an associative array where each key is the first\r\n    // column and each value is the second column\r\n    $result = $pdo->fetchPairs($stm, $bind);\r\n\r\n    // fetchValue() returns the value of the first row in the first column\r\n    $result = $pdo->fetchValue($stm, $bind);\r\n\r\n    // fetchAffected() returns the number of affected rows\r\n    $stm = \"UPDATE test SET incr = incr + 1 WHERE foo = :foo AND bar = :bar\";\r\n    $row_count = $pdo->fetchAffected($stm, $bind);\r\n```\r\n#####数组转换\r\n\r\n```php\r\n    $pdo = $this->getDefault();\r\n\r\n    $stm = 'SELECT * FROM test WHERE foo IN (:foo)'\r\n\r\n    $array = array('foo', 'bar', 'baz');\r\n    $cond = 'IN (' . $pdo->quote($array) . ')';\r\n\r\n    $bind_values = array('foo' => $array);\r\n    $sth = $pdo->perform($stm, $bind_values);\r\n    echo $sth->queryString;\r\n    // \"SELECT * FROM test WHERE foo IN ('foo', 'bar', 'baz')\"\r\n```\r\n\r\n## 视图层\r\n#####基础的twig语法文档请查看twig官方(twig.sensiolabs.org/documentation)\r\n#####简单介绍框架内部扩展好的方法\r\n\r\n    {{ asset(\"asset/css/bootstrap.min.css\") }} asset方法主要是用于获取前端js,css文件的地址\r\n\r\n    {{ url('create_group', {'id':1}) }} 用于匹配路由,第一个参数是routing配置文件的主键，后面是参数，以数组形式\r\n\r\n    {{ render('Web:Group:Group:index') }} 在一个twig文件内部，可以render其他controller下面的模块。\r\n\r\n    {{ 1454566745|smart_time }} 时间戳转换\r\n\r\n#####开启csrf验证防止跨站攻击\r\n\r\n    //在post 请求时，如果在session.php配置文件中开启csrf_check参数，默认会检查csrf_token参数。你可以在表单中加入以下参数\r\n    <form method=\"post\" action=\"{{url('create_group', {'id':1})}}\">\r\n    \r\n      <input type=\"hidden\" name=\"csrf_token\" value=\"{{ csrf_token() }}\">\r\n\r\n      <button type=\"submit\">提交</button>\r\n    </form>\r\n\r\n## 框架基础服务\r\n\r\n## Container\r\n#####Container是一个基础的容器，一些系统变量会存放于这里\r\n\r\n## Cache\r\n\r\n#####目前只支持了Redis得cache，使用请在cache.php配置中配置redis\r\n\r\n```php\r\n\r\n    use Cache;\r\n    //key value expireTime\r\n    Cache::set('ha', 123, 60);\r\n    //也可以这样\r\n    Cache::redis() -> set('haa', 123, 60);\r\n\r\n    Cache::get('ha');\r\n    Cache::hSet($hashKey, $key, $data, $expireTime);\r\n    Cache::hGet($hashKey, $key);\r\n    Cache::hDel($hashKey, $key);\r\n    Cache::hDel($hashKey);\r\n\r\n    //现在的类库方法还未扩展完全，目前只有以上方法\r\n    //你可以使用Cache::redis() 获取redis实例，这是一个PhpRedis的实例，api－》(https://github.com/phpredis/phpredis)\r\n```\r\n\r\n## FileCache\r\n\r\n#####文件形式的缓存\r\n\r\n```php\r\n\r\n    use FileCache;\r\n\r\n    //默认路径是放在runtime/cache/\r\n    FileCache::set('test.php', ['testdfata' => 'datadata']);\r\n    //指定路径\r\n    FileCache::set('test.php', ['testdfata' => 'datadata'], 'runtime/cache/test/');\r\n\r\n    FileCache::get('test.php');\r\n    FileCache::get('test.php', 'runtime/cache/test/');\r\n\r\n```\r\n\r\n## Config\r\n\r\n#####用于查找config目录下得配置\r\n\r\n```php\r\n\r\n    use Config;\r\n\r\n    //文件名::key\r\n    Config::get('app::environment');\r\n\r\n    //也可以重新设置ests\r\n    Config::set('app', 'environment', 'dev');\r\n```\r\n\r\n## EventDispatcher\r\n\r\n#####事件监听Listener\r\n\r\n#####先写一个监听KernalResponseListener\r\n```php\r\n<?php\r\n\r\nnamespace src\\web\\Listeners;\r\n\r\nuse Listener;\r\nuse Event;\r\n\r\nclass KernalResponseListener extends Listener\r\n{\r\n    public function setMethod()\r\n    {\r\n        return 'onKernalResponse';\r\n    }\r\n\r\n    //触发时执行\r\n    public function onKernalResponse(Event $event)\r\n    {\r\n        echo 'this is a KernalResponse Listener';\r\n    }\r\n}\r\n\r\n```\r\n\r\n#####绑定监听\r\n\r\n```php\r\n\r\n    use EventDispatcher;\r\n\r\n    $listener = new KernalResponseListener();\r\n\r\n    //定义一个事件名称，触发的监听器，和一个重要指数\r\n    EventDispatcher::addListener('kernal.responese', $listener, 10);\r\n\r\n    EventDispatcher::removeListener('kernal.responese', $listener);\r\n\r\n    EventDispatcher::hasListeners('kernal.responese');\r\n\r\n    //最后可以在需要的时候派发事件\r\n    EventDispatcher::dispatch('kernal.responese');\r\n    EventDispatcher::dispatch('kernal.responese', $envet);\r\n\r\n```\r\n\r\n#####事件绑定器Subscriber\r\n\r\n#####写一个subscriber\r\n```php\r\n\r\n    use Group\\Events\\EventSubscriberInterface;\r\n\r\n    class TestSubscriber implements EventSubscriberInterface\r\n    {   \r\n        //注册多个监听事件\r\n        public function getSubscribedEvents()\r\n        {\r\n            return [\r\n\r\n                //eventName  =>  listener\r\n                'test.start' => 'onTestStart',\r\n                //eventName  =>  listener, priority\r\n                'test.stop' => ['onTestStop', 100],\r\n                //eventName  => array  listener, priority\r\n                'test.doing' => [\r\n                    ['onDoA'],\r\n                    ['onDoB', 225],\r\n                ],\r\n            ];\r\n        }\r\n\r\n        public function onTestStart(\\Event $event)\r\n        {\r\n            echo 'onTestStart';\r\n        }\r\n\r\n        public function onTestStop(\\Event $event)\r\n        {\r\n            echo 'onTestStop';\r\n        }\r\n\r\n        public function onDoA(\\Event $event)\r\n        {\r\n            echo 'onDoA';\r\n        }\r\n\r\n        public function onDoB(\\Event $event)\r\n        {\r\n            echo 'onDoB';\r\n        }\r\n    }\r\n\r\n```\r\n#####添加到EventDispatcher\r\n```php\r\n        $subscriber = new TestSubscriber();\r\n\r\n        EventDispatcher::addSubscriber($subscriber);\r\n\r\n        EventDispatcher::hasListeners('test.start')\r\n        EventDispatcher::hasListeners('test.stop')\r\n        EventDispatcher::hasListeners('test.doing')\r\n\r\n        EventDispatcher::dispatch('test.start');\r\n        EventDispatcher::dispatch('test.stop');\r\n        EventDispatcher::dispatch('test.doing');\r\n\r\n        EventDispatcher::removeSubscriber($subscriber);\r\n```\r\n\r\n## Request\r\n\r\n#####参照symfony2的Request服务\r\n```php\r\n    public function testAction(Request $request, $id)\r\n    {\r\n        //get\r\n        $request -> query -> get('xxx');\r\n        $request -> query -> all()\r\n\r\n        //post\r\n        $request -> request -> get('xxx');\r\n        $request -> request -> all()\r\n        \r\n\r\n        //file \r\n        $request -> file -> get('xxxx');\r\n    }\r\n```\r\n\r\n## Response\r\n\r\n#####常规\r\n```php\r\n    public function testAction(Request $request, $id)\r\n    {\r\n        return new \\Response('这是文本');\r\n    }\r\n```\r\n\r\n#####json格式\r\n```php\r\n    public function testAction(Request $request, $id)\r\n    {\r\n        return new \\JsonResponse('这是文本');\r\n    }\r\n```\r\n\r\n#####重定向\r\n```php\r\n    public function testAction(Request $request, $id)\r\n    {\r\n        return $this -> redirect('http://xxxx');\r\n    }\r\n```\r\n\r\n## Session\r\n\r\n#####Session 目前支持2中方式存储，默认存放在runtime/sessions下，也可以开启redis driver，将session存在redis中，详见配置\r\n```php\r\n\r\n    use Session;\r\n\r\n    Session::set('group', 'good');\r\n    Session::get('group');\r\n    Session::remove('group');\r\n    Session::has('group');\r\n    Session::clear();\r\n    Session::all();\r\n    Session::isStarted();\r\n\r\n    $attributes = ['group' => 'hello'];\r\n    Session::replace($attributes);\r\n```\r\n## Log\r\n\r\n#####默认存放于runtime/log\r\n```php\r\n\r\n    use Log;\r\n\r\n    Log::debug('123',['user'=>1]);\r\n    Log::info('123',['user'=>1]);\r\n    Log::notice('123',['user'=>1]);\r\n    Log::warning('123',['user'=>1]);\r\n    Log::error('123',['user'=>1]);\r\n    Log::critical('123',['user'=>1]);\r\n    Log::alert('123',['user'=>1]);\r\n    Log::emergency('123',['user'=>1]);\r\n\r\n    //默认model是web.app,也可以自定义\r\n    Log::emergency('123',['user'=>1],'web.admin');\r\n\r\n```\r\n\r\n## Console\r\n\r\n####控制台的使用方法\r\n\r\n    //进入根目录 执行\r\n    app/console\r\n\r\n\r\n    ----------------------------------------------------------\r\n\r\n         -----        ----      ----      |     |   / ----\r\n        /          | /        |      |    |     |   |      |\r\n        |          |          |      |    |     |   | ----/\r\n        |   ----   |          |      |    |     |   |\r\n         -----|    |            ----       ----     |\r\n\r\n     ----------------------------------------------------------\r\n\r\n     使用帮助: \r\n     Usage: app/console [options] [args...] \r\n\r\n     generate:service name       生成一个自定义service\r\n     generate:controller  name    生成一个自定义controller\r\n     sql:generate                生成一个sql执行模板(存放于app/sql)\r\n     sql:clean                清除lock文件,您可以再次执行migrate脚本中的命令\r\n     sql:migrate   [default|write|read|all] [name]  参数可不填，执行sql模板(默认会向default服务器执行.第二个参数只有当第一个参数为write|read时，才会生效,如果不填，默认为write|read下面所有服务器)\r\n     sql:rollback   [default|write|read|all] [name]  参数可不填，执行sql模板(默认会向default服务器执行.第二个参数只有当第一个参数为write|read时，才会生效,如果不填，默认为write|read下面所有服务器)\r\n\r\n####自定义控制台\r\n#####配置文件config/app.php  \r\n```php\r\n    //扩展console命令行控制台\r\n    'console_commands' => [\r\n        'log:clear' => [\r\n            'command' => 'src\\Web\\Command\\LogClearCommand', //执行的类\r\n            'help' => '清除日志', //提示\r\n        ],\r\n    ],\r\n```\r\n## CronJob\r\n#####异步定时器介绍(目前只支持秒级定时,基本涉及到毫秒定时的业务很少)\r\n#####依赖：[Swoole1.7.14以上版本](https://github.com/swoole/swoole-src)\r\n\r\n#####配置文件config/cron.php\r\n```php\r\n    return [\r\n\r\n        'cache_dir' => 'runtime/cron',\r\n\r\n        'class_cache' => 'runtime/cron/bootstrap.class.cache',\r\n\r\n        //log路径\r\n        'log_dir' => 'runtime/cron',\r\n\r\n        //定时器轮询周期，精确到毫秒\r\n        'tick_time' => 1000,\r\n\r\n        'job' => [\r\n\r\n            [\r\n                'name' => 'TestLog',//任务名\r\n                'time' => '*/1 * * * *',//定时规则 分 小时 天 周 月\r\n                'command' => 'src\\Web\\Cron\\Test',//执行的类库\r\n            ],\r\n\r\n            [\r\n                'name' => 'testCache',\r\n                'time' => '24 */2 * * *',//定时规则 分 小时 天 周 月\r\n                'command' => 'src\\Web\\Cron\\TestCache',\r\n            ],\r\n\r\n            [\r\n                'name' => 'testSql',\r\n                'time' => '*/2 * * * *',//定时规则 分 小时 天 周 月\r\n                'command' => 'src\\Web\\Cron\\TestSql',\r\n            ],\r\n\r\n        ],\r\n    ];\r\n```\r\n\r\n#####执行的类库示例\r\n```php\r\n\r\n    namespace src\\Web\\Cron;\r\n\r\n    use Group\\Cron\\CronJob;\r\n\r\n    //继承CronJob父类\r\n    class Test extends CronJob\r\n    {   \r\n        //实现handle方法即可  框架内部所有服务都可正常使用\r\n        public function handle()\r\n        {\r\n            \\Log::info('nihao', ['time' => date('Y-m-d H:i:s', time())], 'cron.job');\r\n        }\r\n\r\n    }\r\n```\r\n#####执行命令\r\n\r\n    app/cron start|restart|stop|status|exec (job name)\r\n\r\n## Queue\r\n#####异步队列服务介绍\r\n#####依赖：[Swoole1.7.14以上版本](https://github.com/swoole/swoole-src) \r\n#####依赖：[beanstalkd](https://github.com/kr/beanstalkd) \r\n\r\n#####向队列插入任务\r\n```php\r\n\r\n    use Queue;\r\n\r\n    //队列名\r\n    $tube = 'testjob1';\r\n    //具体数据\r\n    $data = '这是第一个队列任务';\r\n    //就这么简单 队列已经被塞入内存\r\n    //$priority, $delaytime, $lifetime 可不填。默认会取配置的参数\r\n    $priority = 1;\r\n    $delaytime = 0;\r\n    $lifetime = 60;\r\n    Queue::put($tube, $data, $priority, $delaytime, $lifetime);\r\n\r\n```\r\n#####配置config/queue.php  \r\n#####开启异步队列服务处理任务\r\n    \r\n    app/queue start|restart|stop\r\n\r\n#####最后看看我们的任务怎么写\r\n```php\r\n    <?php\r\n\r\nnamespace src\\Web\\Queue;\r\n\r\nuse Group\\Queue\\QueueJob;\r\n\r\nclass TestJob extends QueueJob\r\n{   \r\n    public function handle()\r\n    {      \r\n        //队列任务的id号\r\n        $jobId = $this -> jobId;\r\n        //你在插入队列时的数据\r\n        $jobData = $this -> jobData;\r\n        //后面就可以写处理的逻辑了\r\n        \\Log::info('queue handle job'.$this -> jobId, ['time' => date('Y-m-d H:i:s', time())], 'queue.job');\r\n    }\r\n\r\n}\r\n```\r\n#####队列图形化管理工具[beanstalk_console](https://github.com/ptrofimov/beanstalk_console) \r\n\r\n## RPC\r\n#####一个启动命令完成rpc服务！！不与其他业务冲突！！\r\n#####依赖：[Swoole](https://github.com/swoole/swoole-src)\r\n#####启用config/app.php 中的serviceProviders里面的RpcServiceProvider\r\n#####配置config/rpc.php文件,\r\n#####服务启动 php rpc_server.php &\r\n#####服务热重启 php rpc_server.php -s reload\r\n#####注意服务会默认开放src/Services下面所有服务的公有函数的调用\r\n#####使用\r\n```php\r\n    \r\n    //指调用User模块下UserService 的getUser方法， 最后跟上参数\r\n    $res = \\Rpc::call('User:User', 'getUser', [1]);\r\n    //错误返回false\r\n    var_dump($res);\r\n\r\n```\r\n#####用途，做soa服务化管理时。用于分布式。\r\n\r\n\r\n## 单元测试\r\n\r\n    phpunit --bootstrap app/test.php src\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}